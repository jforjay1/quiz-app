[{"filePath":"/Users/jaypatel/UNB/Winter 23/SS/quiz-app/src/App.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jaypatel/UNB/Winter 23/SS/quiz-app/src/components/Home.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jaypatel/UNB/Winter 23/SS/quiz-app/src/components/quiz/Instructions.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jaypatel/UNB/Winter 23/SS/quiz-app/src/components/quiz/Login.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jaypatel/UNB/Winter 23/SS/quiz-app/src/components/quiz/Play.js","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'history' is missing in props validation","line":103,"column":14,"nodeType":"Identifier","messageId":"missingPropType","endLine":103,"endColumn":21},{"ruleId":"react/prop-types","severity":2,"message":"'history.push' is missing in props validation","line":103,"column":22,"nodeType":"Identifier","messageId":"missingPropType","endLine":103,"endColumn":26},{"ruleId":"react/prop-types","severity":2,"message":"'history' is missing in props validation","line":319,"column":15,"nodeType":"Identifier","messageId":"missingPropType","endLine":319,"endColumn":22},{"ruleId":"react/prop-types","severity":2,"message":"'history.push' is missing in props validation","line":319,"column":23,"nodeType":"Identifier","messageId":"missingPropType","endLine":319,"endColumn":27}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {Component, Fragment} from 'react';\nimport {Helmet} from 'react-helmet';\nimport M from 'materialize-css';\nimport classnames from 'classnames';\n\nimport questions from '../../questions.json';\nimport isEmpty from '../../utils/is-empty';\n\nclass Play extends Component {\n\tconstructor (props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tquestions,\n\t\t\tcurrentQuestion: {},\n\t\t\tnextQuestion: {},\n\t\t\tpreviousQuestion: {},\n\t\t\tanswer: '',\n\t\t\tnumberOfQuestions: 0,\n\t\t\tnumberOfAnsweredQuestions: 0,\n\t\t\tcurrentQuestionIndex: 0,\n\t\t\tscore: 0,\n\t\t\tcorrectAnswers: 0,\n\t\t\twrongAnswers: 0,\n\t\t\thints: 5,\n\t\t\tfiftyFifty: 2,\n\t\t\tusedFiftyFifty: false,\n\t\t\tnextButtonDisabled: false,\n\t\t\tpreviousButtonDisabled: true,\n\t\t\tpreviousRandomNumbers: [],\n\t\t\ttime: {}\n\t\t};\n\t\tthis.interval = null;\n\t}\n\n\tcomponentDidMount () {\n\t\tconst { questions, currentQuestion, nextQuestion, previousQuestion } = this.state;\n\t\tthis.displayQuestions(questions, currentQuestion, nextQuestion, previousQuestion);\n\t\tthis.startTimer();\n\t}\n\n\tcomponentWillUnmount () {\n\t\tclearInterval(this.interval);\n\t}\n\n\tdisplayQuestions = (questions = this.state.questions, currentQuestion, nextQuestion, previousQuestion) => {\n\t\tlet { currentQuestionIndex } = this.state;\n\t\tif (!isEmpty(this.state.questions)) {\n\t\t\tquestions = this.state.questions;\n\t\t\tcurrentQuestion = questions[currentQuestionIndex];\n\t\t\tnextQuestion = questions[currentQuestionIndex + 1];\n\t\t\tpreviousQuestion = questions[currentQuestionIndex - 1];\n\t\t\tconst answer = currentQuestion.answer;\n\t\t\tthis.setState({\n\t\t\t\tcurrentQuestion,\n\t\t\t\tnextQuestion,\n\t\t\t\tpreviousQuestion,\n\t\t\t\tnumberOfQuestions: questions.length,\n\t\t\t\tanswer,\n\t\t\t\tpreviousRandomNumbers: []\n\t\t\t}, () => {\n\t\t\t\tthis.showOptions();\n\t\t\t\tthis.handleDisableButton();\n\t\t\t});\n\t\t}\n\t};\n\n\thandleOptionClick = (e) => {\n\t\tif (e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n\t\t\tthis.correctTimeout = setTimeout(() => {\n\t\t\t\tthis.correctSound.current.play();\n\t\t\t}, 500);\n\t\t\tthis.correctAnswer();\n\t\t} else {\n\t\t\tthis.wrongTimeout = setTimeout(() => {\n\t\t\t\tthis.wrongSound.current.play();\n\t\t\t}, 500);\n\t\t\tthis.wrongAnswer();\n\t\t}\n\t};\n\n\thandleNextButtonClick = () => {\n\t\tif (this.state.nextQuestion !== undefined) {\n\t\t\tthis.setState(prevState => ({\n\t\t\t\tcurrentQuestionIndex: prevState.currentQuestionIndex + 1\n\t\t\t}), () => {\n\t\t\t\tthis.displayQuestions(this.state.state, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n\t\t\t});\n\t\t}\n\t};\n\n\thandlePreviousButtonClick = () => {\n\t\tif (this.state.previousQuestion !== undefined) {\n\t\t\tthis.setState(prevState => ({\n\t\t\t\tcurrentQuestionIndex: prevState.currentQuestionIndex - 1\n\t\t\t}), () => {\n\t\t\t\tthis.displayQuestions(this.state.state, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n\t\t\t});\n\t\t}\n\t};\n\n\thandleQuitButtonClick = () => {\n\n\t\tthis.props.history.push('/');\n\t};\n\n\thandleButtonClick = (e) => {\n\t\tswitch (e.target.id) {\n\t\tcase 'next-button':\n\t\t\tthis.handleNextButtonClick();\n\t\t\tbreak;\n\n\t\tcase 'previous-button':\n\t\t\tthis.handlePreviousButtonClick();\n\t\t\tbreak;\n\n\t\tcase 'quit-button':\n\t\t\tthis.handleQuitButtonClick();\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t};\n\n\tcorrectAnswer = () => {\n\t\tM.toast({\n\t\t\thtml: 'Correct Answer!',\n\t\t\tclasses: 'toast-valid',\n\t\t\tdisplayLength: 1500\n\t\t});\n\t\tthis.setState(prevState => ({\n\t\t\tscore: prevState.score + 1,\n\t\t\tcorrectAnswers: prevState.correctAnswers + 1,\n\t\t\tcurrentQuestionIndex: prevState.currentQuestionIndex + 1,\n\t\t\tnumberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1\n\t\t}), () => {\n\t\t\tif (this.state.nextQuestion === undefined) {\n\t\t\t\tthis.endGame();\n\t\t\t} else {\n\t\t\t\tthis.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n\t\t\t}\n\t\t});\n\t};\n\n\twrongAnswer = () => {\n\t\tnavigator.vibrate(1000);\n\t\tM.toast({\n\t\t\thtml: 'Wrong Answer!',\n\t\t\tclasses: 'toast-invalid',\n\t\t\tdisplayLength: 1500\n\t\t});\n\t\tthis.setState(prevState => ({\n\t\t\twrongAnswers: prevState.wrongAnswers + 1,\n\t\t\tcurrentQuestionIndex: prevState.currentQuestionIndex + 1,\n\t\t\tnumberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions + 1,\n\t\t}), () => {\n\t\t\tif (this.state.nextQuestion === undefined) {\n\t\t\t\tthis.endGame();\n\t\t\t} else {\n\t\t\t\tthis.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\n\t\t\t}\n\t\t});\n\t};\n\n\tshowOptions = () => {\n\t\tconst options = Array.from(document.querySelectorAll('.option'));\n\n\t\toptions.forEach(option => {\n\t\t\toption.style.visibility = 'visible';\n\t\t});\n\n\t\tthis.setState({\n\t\t\tusedFiftyFifty: false\n\t\t});\n\t};\n\n\thandleHints = () => {\n\t\tif (this.state.hints > 0) {\n\t\t\tconst options = Array.from(document.querySelectorAll('.option'));\n\t\t\tlet indexOfAnswer;\n\n\t\t\toptions.forEach((option, index) => {\n\t\t\t\tif (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n\t\t\t\t\tindexOfAnswer = index;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlet random1=true;\n\t\t\twhile (random1===true) {\n\t\t\t\tconst randomNumber = Math.round(crypto.getRandomValues() * 3);\n\t\t\t\tif (randomNumber !== indexOfAnswer && !this.state.previousRandomNumbers.includes(randomNumber)) {\n\t\t\t\t\toptions.forEach((option, index) => {\n\t\t\t\t\t\tif (index === randomNumber) {\n\t\t\t\t\t\t\toption.style.visibility = 'hidden';\n\t\t\t\t\t\t\tthis.setState((prevState) => ({\n\t\t\t\t\t\t\t\thints: prevState.hints - 1,\n\t\t\t\t\t\t\t\tpreviousRandomNumbers: prevState.previousRandomNumbers.concat(randomNumber)\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\trandom1=false;\n\t\t\t\t}\n\t\t\t\tif (this.state.previousRandomNumbers.length >= 3) break;\n\t\t\t}\n\t\t}\n\t};\n\n\thandleFiftyFifty = () => {\n\t\tif (this.state.fiftyFifty > 0 && this.state.usedFiftyFifty === false) {\n\t\t\tconst options = document.querySelectorAll('.option');\n\t\t\tconst randomNumbers = [];\n\t\t\tlet indexOfAnswer;\n\n\t\t\toptions.forEach((option, index) => {\n\t\t\t\tif (option.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\n\t\t\t\t\tindexOfAnswer = index;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tlet count = 0;\n\t\t\tlet random2=true;\n\t\t\tdo {\n\t\t\t\tconst randomNumber = Math.round(crypto.getRandomValues() * 3);\n\t\t\t\tif (randomNumber !== indexOfAnswer) {\n\t\t\t\t\tif (randomNumbers.length < 2 && !randomNumbers.includes(randomNumber) && !randomNumbers.includes(indexOfAnswer)) {\n\t\t\t\t\t\trandomNumbers.push(randomNumber);\n\t\t\t\t\t\tcount ++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twhile (random2===true) {\n\t\t\t\t\t\t\tconst newRandomNumber = Math.round(crypto.getRandomValues() * 3);\n\t\t\t\t\t\t\tif (!randomNumbers.includes(newRandomNumber) && newRandomNumber !== indexOfAnswer) {\n\t\t\t\t\t\t\t\trandomNumbers.push(newRandomNumber);\n\t\t\t\t\t\t\t\tcount ++;\n\t\t\t\t\t\t\t\trandom2=false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (count < 2);\n\n\t\t\toptions.forEach((option, index) => {\n\t\t\t\tif (randomNumbers.includes(index)) {\n\t\t\t\t\toption.style.visibility = 'hidden';\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.setState(prevState => ({\n\t\t\t\tfiftyFifty: prevState.fiftyFifty - 1,\n\t\t\t\tusedFiftyFifty: true\n\t\t\t}));\n\t\t}\n\t};\n\n\tstartTimer = () => {\n\t\tconst countDownTime = Date.now() + 180000;\n\t\tthis.interval = setInterval(() => {\n\t\t\tconst now = new Date();\n\t\t\tconst distance = countDownTime - now;\n\n\t\t\tconst minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n\t\t\tconst seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n\t\t\tif (distance < 0) {\n\t\t\t\tclearInterval(this.interval);\n\t\t\t\tthis.setState({\n\t\t\t\t\ttime: {\n\t\t\t\t\t\tminutes: 0,\n\t\t\t\t\t\tseconds: 0\n\t\t\t\t\t}\n\t\t\t\t}, () => {\n\t\t\t\t\tthis.endGame();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttime: {\n\t\t\t\t\t\tminutes,\n\t\t\t\t\t\tseconds,\n\t\t\t\t\t\tdistance\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}, 1000);\n\t};\n\n\thandleDisableButton = () => {\n\t\tif (this.state.previousQuestion === undefined || this.state.currentQuestionIndex === 0) {\n\t\t\tthis.setState({\n\t\t\t\tpreviousButtonDisabled: true\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tpreviousButtonDisabled: false\n\t\t\t});\n\t\t}\n\n\t\tif (this.state.nextQuestion === undefined || this.state.currentQuestionIndex + 1 === this.state.numberOfQuestions) {\n\t\t\tthis.setState({\n\t\t\t\tnextButtonDisabled: true\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tnextButtonDisabled: false\n\t\t\t});\n\t\t}\n\t};\n\n\tendGame = () => {\n\t\tconst { state } = this;\n\t\tconst playerStats = {\n\t\t\tscore: state.score,\n\t\t\tnumberOfQuestions: state.numberOfQuestions,\n\t\t\tnumberOfAnsweredQuestions: state.correctAnswers + state.wrongAnswers,\n\t\t\tcorrectAnswers: state.correctAnswers,\n\t\t\twrongAnswers: state.wrongAnswers,\n\t\t\tfiftyFiftyUsed: 2 - state.fiftyFifty,\n\t\t\thintsUsed: 5 - state.hints\n\t\t};\n\t\tsetTimeout(() => {\n\t\t\tthis.props.history.push('/play/quizSummary', playerStats);\n\t\t}, 1000);\n\t};\n\n\trender () {\n\t\tconst {\n\t\t\tcurrentQuestion,\n\t\t\tcurrentQuestionIndex,\n\t\t\tfiftyFifty,\n\t\t\thints,\n\t\t\tnumberOfQuestions,\n\t\t\ttime\n\t\t} = this.state;\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<Helmet><title>Quiz Page</title></Helmet>\n\t\t\t\t<div className=\"questions\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className=\"lifeline-container\">\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<span onClick={this.handleFiftyFifty} className=\"mdi mdi-set-center mdi-24px lifeline-icon\">\n\t\t\t\t\t\t\t\t\t<span className=\"lifeline\">{fiftyFifty}</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<span onClick={this.handleHints} className=\"mdi mdi-lightbulb-on-outline mdi-24px lifeline-icon\">\n\t\t\t\t\t\t\t\t\t<span className=\"lifeline\">{hints}</span>\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<h2>Quiz Time</h2>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t<span className=\"left\" style={{ float: 'left' }}>{currentQuestionIndex + 1} of {numberOfQuestions}</span>\n\t\t\t\t\t\t\t<span className={classnames('right valid', {\n\t\t\t\t\t\t\t\t'warning': time.distance <= 120000,\n\t\t\t\t\t\t\t\t'invalid': time.distance < 30000\n\t\t\t\t\t\t\t})}>\n\t\t\t\t\t\t\t\t{time.minutes}:{time.seconds}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t<h3>{currentQuestion.question}</h3>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<div className=\"options-container\">\n\t\t\t\t\t\t\t<p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionA}</p>\n\t\t\t\t\t\t\t<p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionB}</p>\n\t\t\t\t\t\t\t<p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionC}</p>\n\t\t\t\t\t\t\t<p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionD}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<div className=\"button-container\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName={classnames('', {'disable': this.state.previousButtonDisabled})}\n\t\t\t\t\t\t\tid=\"previous-button\"\n\t\t\t\t\t\t\tonClick={this.handleButtonClick}>\n\t\t\t\t\t\t\t\tPrevious\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName={classnames('', {'disable': this.state.nextButtonDisabled})}\n\t\t\t\t\t\t\tid=\"next-button\"\n\t\t\t\t\t\t\tonClick={this.handleButtonClick}>\n                                Next\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button id=\"quit-button\" onClick={this.handleButtonClick}>Quit</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\nexport default Play;","usedDeprecatedRules":[]},{"filePath":"/Users/jaypatel/UNB/Winter 23/SS/quiz-app/src/components/quiz/QuizSummary.js","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'location.state' is missing in props validation","line":20,"column":11,"nodeType":"Property","messageId":"missingPropType","endLine":20,"endColumn":16},{"ruleId":"react/prop-types","severity":2,"message":"'location' is missing in props validation","line":20,"column":32,"nodeType":"Identifier","messageId":"missingPropType","endLine":20,"endColumn":40},{"ruleId":"react/prop-types","severity":2,"message":"'location.state.score' is missing in props validation","line":23,"column":19,"nodeType":"Identifier","messageId":"missingPropType","endLine":23,"endColumn":24},{"ruleId":"react/prop-types","severity":2,"message":"'location.state.numberOfQuestions' is missing in props validation","line":23,"column":33,"nodeType":"Identifier","messageId":"missingPropType","endLine":23,"endColumn":50},{"ruleId":"react/prop-types","severity":2,"message":"'location.state.numberOfQuestions' is missing in props validation","line":24,"column":30,"nodeType":"Identifier","messageId":"missingPropType","endLine":24,"endColumn":47},{"ruleId":"react/prop-types","severity":2,"message":"'location.state.numberOfAnsweredQuestions' is missing in props validation","line":25,"column":38,"nodeType":"Identifier","messageId":"missingPropType","endLine":25,"endColumn":63},{"ruleId":"react/prop-types","severity":2,"message":"'location.state.correctAnswers' is missing in props validation","line":26,"column":27,"nodeType":"Identifier","messageId":"missingPropType","endLine":26,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'location.state.wrongAnswers' is missing in props validation","line":27,"column":25,"nodeType":"Identifier","messageId":"missingPropType","endLine":27,"endColumn":37},{"ruleId":"react/prop-types","severity":2,"message":"'location.state.hintsUsed' is missing in props validation","line":28,"column":22,"nodeType":"Identifier","messageId":"missingPropType","endLine":28,"endColumn":31},{"ruleId":"react/prop-types","severity":2,"message":"'location.state.fiftyFiftyUsed' is missing in props validation","line":29,"column":27,"nodeType":"Identifier","messageId":"missingPropType","endLine":29,"endColumn":41},{"ruleId":"react/prop-types","severity":2,"message":"'location.state' is missing in props validation","line":35,"column":11,"nodeType":"Property","messageId":"missingPropType","endLine":35,"endColumn":16},{"ruleId":"react/prop-types","severity":2,"message":"'location' is missing in props validation","line":35,"column":32,"nodeType":"Identifier","messageId":"missingPropType","endLine":35,"endColumn":40}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, {Component, Fragment} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {Link} from 'react-router-dom';\n\nclass QuizSummary extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tscore: 0,\n\t\t\tnumberOfQuestions: 0,\n\t\t\tnumberOfAnsweredQuestions: 0,\n\t\t\tcorrectAnswers: 0,\n\t\t\twrongAnswers: 0,\n\t\t\thintsUsed: 0,\n\t\t\tfiftyFiftyUsed: 0\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { state } = this.props.location;\n\t\tif (state) {\n\t\t\tthis.setState({\n\t\t\t\tscore: (state.score / state.numberOfQuestions) * 100,\n\t\t\t\tnumberOfQuestions: state.numberOfQuestions,\n\t\t\t\tnumberOfAnsweredQuestions: state.numberOfAnsweredQuestions,\n\t\t\t\tcorrectAnswers: state.correctAnswers,\n\t\t\t\twrongAnswers: state.wrongAnswers,\n\t\t\t\thintsUsed: state.hintsUsed,\n\t\t\t\tfiftyFiftyUsed: state.fiftyFiftyUsed\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { state } = this.props.location;\n\t\tlet stats, remark;\n\t\tconst userScore = this.state.score;\n\n\t\tif (userScore <= 30) {\n\t\t\tremark = 'You Failed!';\n\t\t} else if (userScore > 30 && userScore <= 50) {\n\t\t\tremark = 'One more shot?';\n\t\t} else if (userScore <= 70 && userScore > 50) {\n\t\t\tremark = 'Keep trying!';\n\t\t} else if (userScore >= 71 && userScore <= 84) {\n\t\t\tremark = 'You did amazing!';\n\t\t} else {\n\t\t\tremark = 'You\\'re an absolute genius!';\n\t\t}\n\n\t\tif (state !== undefined) {\n\t\t\tstats = (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<h1>Result</h1>\n\t\t\t\t\t<div className=\"container stats\">\n\t\t\t\t\t\t<h4>{remark}</h4>\n\t\t\t\t\t\t<h2>Score: {this.state.score.toFixed(0)}&#37;</h2>\n\t\t\t\t\t\t<span className=\"stat left\">Total number of questions: </span>\n\t\t\t\t\t\t<span className=\"right\">{this.state.numberOfQuestions}</span><br />\n\n\t\t\t\t\t\t<span className=\"stat left\">Number of attempted questions: </span>\n\t\t\t\t\t\t<span className=\"right\">{this.state.numberOfAnsweredQuestions}</span><br />\n\n\t\t\t\t\t\t<span className=\"stat left\">Number of Correct Answers: </span>\n\t\t\t\t\t\t<span className=\"right\">{this.state.correctAnswers}</span> <br />\n\n\t\t\t\t\t\t<span className=\"stat left\">Number of Wrong Answers: </span>\n\t\t\t\t\t\t<span className=\"right\">{this.state.wrongAnswers}</span><br />\n\n\t\t\t\t\t\t<span className=\"stat left\">Hints Used: </span>\n\t\t\t\t\t\t<span className=\"right\">{this.state.hintsUsed}</span><br />\n\n\t\t\t\t\t\t<span className=\"stat left\">50-50 Used: </span>\n\t\t\t\t\t\t<span className=\"right\">{this.state.fiftyFiftyUsed}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<div className=\"button-container\">\n\t\t\t\t\t\t\t<button onClick={() => window.location.href = '/play/quiz'}>Play Again</button>\n\t\t\t\t\t\t\t<button onClick={() => window.location.href = '/'}>Back to Home</button>\n\t\t\t\t\t\t\t<button onClick={() => window.location.href = '/play/summary'}>Result</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t</Fragment>\n\t\t\t);\n\t\t} else {\n\t\t\tstats = (\n\t\t\t\t<section>\n\t\t\t\t\t<h1 className=\"no-stats\">No Statistics Available</h1>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/play/quiz\">Take a Quiz</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link to=\"/\">Back to Home</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</section>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<Helmet><title>Result</title></Helmet>\n\t\t\t\t<div className=\"quiz-summary\">\n\t\t\t\t\t{stats}\n\t\t\t\t</div>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default QuizSummary;","usedDeprecatedRules":[]},{"filePath":"/Users/jaypatel/UNB/Winter 23/SS/quiz-app/src/components/quiz/Summary.js","messages":[{"ruleId":"react/prop-types","severity":2,"message":"'questions' is missing in props validation","line":4,"column":20,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":29},{"ruleId":"react/prop-types","severity":2,"message":"'userAnswers' is missing in props validation","line":4,"column":31,"nodeType":"Property","messageId":"missingPropType","endLine":4,"endColumn":42},{"ruleId":"react/prop-types","severity":2,"message":"'questions.map' is missing in props validation","line":17,"column":16,"nodeType":"Identifier","messageId":"missingPropType","endLine":17,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Summary = ({ questions, userAnswers }) => {\n\tconst numCorrect = this.props.questions.reduce(\n\t\t(acc, { answer }, i) => (answer === userAnswers[i] ? acc + 1 : acc),\n\t\t0\n\t);\n\tconst numQuestions = this.props.questions.length;\n\tconst score = ((numCorrect / numQuestions) * 100).toFixed(2);\n\n\treturn (\n\t\t<div className=\"summary-container\">\n\t\t\t<h1>Quiz Summary</h1>\n\t\t\t<h2>Your Score: {score}%</h2>\n\t\t\t<div className=\"summary-list-container\">\n\t\t\t\t{questions.map(({ question, answer }, i) => (\n\t\t\t\t\t<div key={i} className=\"summary-list-item\">\n\t\t\t\t\t\t<h3>{question}</h3>\n\t\t\t\t\t\t<p>Your answer: {userAnswers[i]}</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\tCorrect answer: <strong>{answer}</strong>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t{answer === userAnswers[i] ? (\n\t\t\t\t\t\t\t<p className=\"correct-answer\">Correct!</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<p className=\"incorrect-answer\">Incorrect</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<Link to=\"/\" className=\"play-again-button\">\n\t\t\t\t\tPlay Again\n\t\t\t</Link>\n\t\t</div>\n\t);\n};\n\nexport default Summary;\n","usedDeprecatedRules":[]},{"filePath":"/Users/jaypatel/UNB/Winter 23/SS/quiz-app/src/index.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jaypatel/UNB/Winter 23/SS/quiz-app/src/setupTests.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/jaypatel/UNB/Winter 23/SS/quiz-app/src/utils/is-empty.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]